/*
Реализуйте шаблонную функцию minimum, которая находит минимальный элемент, который хранится в 
экземпляре шаблонного класса Array, при этом типовой параметр шаблона Array может быть произвольным. 
Чтобы сравнивать объекты произвольного типа, на вход функции также будет передаваться компаратор, в качестве
компаратора может выступать функция или объект класса с перегруженным оператором "()". Примеры вызова функции minimum:
*/
#include <cstddef>

template <typename T>
class Array
{
public:
	explicit Array(size_t size = 0, const T& value = T());
	Array(const Array& other);
	~Array();
	Array& operator=(Array other);
	void swap(Array &other);
	size_t size() const;
	T& operator[](size_t idx);
	const T& operator[](size_t idx) const;

private:
	size_t size_;
	T *data_;
};

// put your code here
template <typename T, typename Comp>
T minimum (Array<T> arr, Comp comp){

 size_t i, size = arr.size();
 T res = arr[0];
 for (i = 1;i<size;i++)
    if (comp(arr[i],res))
        res = arr[i];
 return res;
}
