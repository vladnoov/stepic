/*
Шаблонный класс Array может хранить объекты любого типа, для которого определён конструктор копирования,
в том числе и другой Array, например, Array< Array<int> >. Глубина вложенности может быть произвольной.
Напишите шаблонную функцию (или несколько) flatten, которая принимает на вход такой "многомерный"
Array неизвестной заранее глубины вложенности и выводит в поток out
через пробел все элементы, хранящиеся на самом нижнем уровне. Примеры работы функции flatten:
*/
#include <iostream>


// Весь вывод должен осуществляться в поток out,
// переданный в качестве параметра.
//
// Можно заводить любые вспомогательные функции,
// структуры или даже изменять сигнатуру flatten,
// но при этом все примеры вызова из задания должны
// компилироваться и работать.

template <typename Type>
void flatten(const Array<Type>& array, std::ostream& out)
{
	for (size_t i = 0; i != array.size(); ++i) {
		out << array[i] << " ";
	}
}
template <typename Type>
void flatten(const Array< Array<Type> >& array, std::ostream& out)
{
	for (size_t i = 0; i != array.size(); ++i) {
		flatten(array[i], out);
	}
}
