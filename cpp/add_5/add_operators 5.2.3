/*
Еще одна важная группа операторов, которые полезно реализовать для класса рациональных чисел — это операторы сравнения.
Реализуйте операторы <, <=, >, >=, ==, != для класса Rational так, чтобы можно было сравнивать объекты класса Rational 
не только друг с другом, но и с целыми числами.
*/

struct Rational
{
    Rational(int numerator = 0, int denominator = 1);

    void add(Rational rational);
    void sub(Rational rational);
    void mul(Rational rational);
    void div(Rational rational);

    void neg();
    void inv();
    double to_double() const;

    Rational& operator+=(Rational rational);
    Rational& operator-=(Rational rational);
    Rational& operator*=(Rational rational);
    Rational& operator/=(Rational rational);

    Rational operator-() const;
    Rational operator+() const;
    int getNUM() {
		return numerator_;
	}

	int getDENOM() {
		return denominator_;
	}

private:
    int numerator_;
    int denominator_;
};

Rational operator+(Rational lhs, Rational rhs);
Rational operator-(Rational lhs, Rational rhs);
Rational operator*(Rational lhs, Rational rhs);
Rational operator/(Rational lhs, Rational rhs);


 bool operator == (Rational a, Rational b) {

	 return (a.getNUM()* b.getDENOM() == a.getDENOM() * b.getNUM());
}

 bool operator != (Rational a, Rational b) {

	 return !(a.getNUM()* b.getDENOM() == a.getDENOM() * b.getNUM());
 }

 bool operator >= (Rational a, Rational b) {

	 return (a.getNUM()* b.getDENOM() >= a.getDENOM() * b.getNUM());
 }

 bool operator <= (Rational a, Rational b) {

	 return (a.getNUM()* b.getDENOM() <= a.getDENOM() * b.getNUM());
 }

 bool operator > (Rational a, Rational b) {

	 return (a.getNUM()* b.getDENOM() > a.getDENOM() * b.getNUM());
 }

 bool operator < (Rational a, Rational b) {

	 return (a.getNUM()* b.getDENOM() < a.getDENOM() * b.getNUM());
 }
