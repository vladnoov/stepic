struct Expression;
struct Number;
struct BinaryOperation;

struct ScopedPtr
{
    public:

	explicit ScopedPtr(Expression *ptr = 0) {
		this->ptr_ = ptr;
	}
	~ScopedPtr() {
		delete ptr_;
	}
	Expression* get() const {
		return ptr_;
	}

	Expression* release() {
		Expression *temp = ptr_;
		ptr_ = NULL;
		return temp;
	}

	void reset(Expression *ptr = 0) {
		delete ptr_;

		ptr_ = ptr;

	}

	Expression& operator*() const {
		return *ptr_;
	}

	Expression* operator->() const {
		return ptr_;
	}
    // реализуйте следующие методы:
    //
    // explicit ScopedPtr(Expression *ptr = 0)
    // ~ScopedPtr()
    // Expression* get() const
    // Expression* release()
    // void reset(Expression *ptr = 0)
    // Expression& operator*() const
    // Expression* operator->() const


private:
    // запрещаем копирование ScopedPtr
    ScopedPtr(const ScopedPtr&);
    ScopedPtr& operator=(const ScopedPtr&);

    Expression *ptr_;
};
